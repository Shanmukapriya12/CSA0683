def quick_sort(arr, low, high):
    """Perform Quick Sort on the array using the middle element as pivot."""
    if low < high:
        # Partition the array and get the pivot index
        pivot_index = partition(arr, low, high)
        
        # Recursively apply Quick Sort on the sub-arrays
        quick_sort(arr, low, pivot_index - 1)
        quick_sort(arr, pivot_index + 1, high)
        
        # Print the array after each recursive call
        print("Array after sorting between indices", low, "and", high, ":", arr)

def partition(arr, low, high):
    """Partition the array using the middle element as the pivot."""
    mid = (low + high) // 2
    pivot = arr[mid]
    
    # Swap the pivot with the first element to use it in partitioning
    arr[low], arr[mid] = arr[mid], arr[low]
    
    left = low + 1
    right = high
    
    while left <= right:
        # Move the left pointer to the right as long as elements are less than or equal to the pivot
        while left <= high and arr[left] <= pivot:
            left += 1
        
        # Move the right pointer to the left as long as elements are greater than the pivot
        while right >= low and arr[right] > pivot:
            right -= 1
        
        # Swap elements if needed
        if left < right:
            arr[left], arr[right] = arr[right], arr[left]
    
    # Place the pivot in its correct position
    arr[low], arr[right] = arr[right], arr[low]
    
    return right

# Test Case
arr = [19, 72, 35, 46, 58, 91, 22, 31]
print("Initial Array:", arr)
quick_sort(arr, 0, len(arr) - 1)
print("Final Sorted Array:", arr)
