from itertools import combinations

def subset_sum(arr, target):
    """Returns a set of subset sums that can be achieved using elements of arr."""
    result = set()
    for r in range(len(arr) + 1):
        for combo in combinations(arr, r):
            result.add(sum(combo))
    return result

def meet_in_the_middle(arr, target):
    """Determine if there is a subset with sum exactly equal to target using the Meet in the Middle technique."""
    # Split the array into two halves
    mid = len(arr) // 2
    left_part = arr[:mid]
    right_part = arr[mid:]
    
    # Compute all possible subset sums for both halves
    left_sums = subset_sum(left_part, target)
    right_sums = subset_sum(right_part, target)
    
    # Check if any combination of sums from both halves equals the target
    for s in left_sums:
        if (target - s) in right_sums:
            return True
    return False

# Test Case
arr = [1, 3, 9, 2, 7, 12]
target = 15
result = meet_in_the_middle(arr, target)
print(f"Is there a subset with sum exactly {target}? {result}")
